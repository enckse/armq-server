//go:generate go run setup.go
package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"strings"
)

const (
	generated = `// Code generated by setup.go. DO NOT EDIT.
package main
`
	wrapper = `
func main() {
	main%s()
}
`
	convHeader = `
import "encoding/json"

const quoteByte = byte('"')
`
	strType  = "string"
	convBody = `
func %sConverter(expect %s, d []byte, op opType) bool {
	i, ok := %sFromJSON(d)
	if ok {
		switch op {%s
		case nEquals:
			return i != expect
		case equals:
			return i == expect
		}
	}
	return false
}

func %sFromJSON(d []byte) (%s, bool) {
	var i %s
	err := json.Unmarshal(d, &i)
	if err != nil {
		length := len(d)
		if length > 1 && d[0] == quoteByte && d[length-1] == quoteByte {
			return %sFromJSON(d[1 : length-1])
		}
		return %s, false
	}
	return i, true
}
`

	numericBody = `
		case lessThan:
			return i < expect
		case lessTE:
			return i <= expect
		case greatThan:
			return i > expect
		case greatTE:
			return i >= expect`
)

type genCall func(int, string, *bytes.Buffer)

func genType(idx int, t string, b *bytes.Buffer) {
	if idx == 0 {
		b.WriteString(convHeader)
	}
	caseBody := ""
	def := "0"
	if t == strType {
		def = "\"\""
	} else {
		caseBody = numericBody
	}
	genBody := fmt.Sprintf(convBody, t, t, t, caseBody, t, t, t, t, def)
	b.WriteString(genBody)
}

func converters() {
	var b *bytes.Buffer
	for i, t := range []string{"int", "int64", strType, "float64"} {
		b = genFile(i, t, b, genType)
	}
	write(b, "")
}

func wrappers() {
	for _, t := range []string{"Api", "Receiver"} {
		var b *bytes.Buffer
		b = genFile(0, t, b, func(idx int, t string, b *bytes.Buffer) {
			b.WriteString(fmt.Sprintf(wrapper, t))
		})
		l := fmt.Sprintf("_%s", strings.ToLower(t))
		write(b, l)
	}
}

func write(b *bytes.Buffer, suffix string) {
	if err := ioutil.WriteFile(fmt.Sprintf("generated%s.go", suffix), b.Bytes(), 0644); err != nil {
		panic(err)
	}
}

func genFile(idx int, obj string, b *bytes.Buffer, callback genCall) *bytes.Buffer {
	str := ""
	if b == nil {
		b = bytes.NewBufferString(str)
		b.WriteString(generated)
	}
	callback(idx, obj, b)
	return b
}

func gen() {
	converters()
	wrappers()
}

func main() {
	gen()
}
