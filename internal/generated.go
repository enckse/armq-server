// Code generated by setup.go. DO NOT EDIT.
package internal

import "encoding/json"

const quoteByte = byte('"')

func intConverter(expect int, d []byte, op opType) bool {
	i, ok := intFromJSON(d)
	if ok {
		switch op {

		case lessThan:
			return i < expect
		case lessTE:
			return i <= expect
		case greatThan:
			return i > expect
		case greatTE:
			return i >= expect

		case nEquals:
			return i != expect
		case equals:
			return i == expect
		}
	}
	return false
}

func intFromJSON(d []byte) (int, bool) {
	var i int
	err := json.Unmarshal(d, &i)
	if err != nil {
		length := len(d)
		if length > 1 && d[0] == quoteByte && d[length-1] == quoteByte {
			return intFromJSON(d[1 : length-1])
		}
		return 0, false
	}
	return i, true
}

func int64Converter(expect int64, d []byte, op opType) bool {
	i, ok := int64FromJSON(d)
	if ok {
		switch op {

		case lessThan:
			return i < expect
		case lessTE:
			return i <= expect
		case greatThan:
			return i > expect
		case greatTE:
			return i >= expect

		case nEquals:
			return i != expect
		case equals:
			return i == expect
		}
	}
	return false
}

func int64FromJSON(d []byte) (int64, bool) {
	var i int64
	err := json.Unmarshal(d, &i)
	if err != nil {
		length := len(d)
		if length > 1 && d[0] == quoteByte && d[length-1] == quoteByte {
			return int64FromJSON(d[1 : length-1])
		}
		return 0, false
	}
	return i, true
}

func stringConverter(expect string, d []byte, op opType) bool {
	i, ok := stringFromJSON(d)
	if ok {
		switch op {

		case nEquals:
			return i != expect
		case equals:
			return i == expect
		}
	}
	return false
}

func stringFromJSON(d []byte) (string, bool) {
	var i string
	err := json.Unmarshal(d, &i)
	if err != nil {
		length := len(d)
		if length > 1 && d[0] == quoteByte && d[length-1] == quoteByte {
			return stringFromJSON(d[1 : length-1])
		}
		return "", false
	}
	return i, true
}

func float64Converter(expect float64, d []byte, op opType) bool {
	i, ok := float64FromJSON(d)
	if ok {
		switch op {

		case lessThan:
			return i < expect
		case lessTE:
			return i <= expect
		case greatThan:
			return i > expect
		case greatTE:
			return i >= expect

		case nEquals:
			return i != expect
		case equals:
			return i == expect
		}
	}
	return false
}

func float64FromJSON(d []byte) (float64, bool) {
	var i float64
	err := json.Unmarshal(d, &i)
	if err != nil {
		length := len(d)
		if length > 1 && d[0] == quoteByte && d[length-1] == quoteByte {
			return float64FromJSON(d[1 : length-1])
		}
		return 0, false
	}
	return i, true
}
